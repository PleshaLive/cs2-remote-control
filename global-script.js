// Global CS2 Remote Control - –±–µ–∑ —Å–µ—Å—Å–∏–π, –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
class GlobalRemoteControl {
    constructor() {
        this.commandsSent = 0;
        this.startTime = Date.now();
        
        // UI —ç–ª–µ–º–µ–Ω—Ç—ã
        this.statusElement = document.getElementById('status');
        this.logElement = document.getElementById('event-log');
        this.commandsSentElement = document.getElementById('commands-sent');
        this.sessionTimeElement = document.getElementById('session-time');
        
        // –ì–ª–æ–±–∞–ª—å–Ω—ã–π Gist –¥–ª—è –∫–æ–º–∞–Ω–¥ (–ø—É–±–ª–∏—á–Ω—ã–π)
        this.gistId = '85e3c77f4a6b8b8e0c6d9a4b5f2c1e3d'; // –≠—Ç–æ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        this.gistUrl = `https://api.github.com/gists/${this.gistId}`;
        
        this.init();
    }

    init() {
        this.bindEvents();
        this.startSessionTimer();
        
        this.log('üåê –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –∑–∞–ø—É—â–µ–Ω', 'success');
        this.log('‚ÑπÔ∏è –í—Å–µ –∫–æ–º–∞–Ω–¥—ã –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é –Ω–∞ GSI Companion', 'info');
    }

    bindEvents() {
        // –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        document.querySelectorAll('.control-btn').forEach(button => {
            button.addEventListener('click', (e) => this.handleButtonClick(e));
        });

        // –õ–æ–≥ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        document.getElementById('clear-log').addEventListener('click', () => {
            this.logElement.innerHTML = '<div class="log-entry info">–õ–æ–≥ –æ—á–∏—â–µ–Ω</div>';
        });

        document.getElementById('export-log').addEventListener('click', () => {
            this.exportLog();
        });

        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –∫–Ω–æ–ø–∫–∏
        document.getElementById('add-custom-btn').addEventListener('click', () => {
            this.addCustomButton();
        });

        // –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏
        document.addEventListener('keydown', (e) => {
            if (e.ctrlKey || e.metaKey) {
                switch(e.key) {
                    case '1':
                        e.preventDefault();
                        document.querySelector('[data-action="live"]')?.click();
                        break;
                    case '2':
                        e.preventDefault();
                        document.querySelector('[data-action="pause"]')?.click();
                        break;
                    case '3':
                        e.preventDefault();
                        document.querySelector('[data-action="stop"]')?.click();
                        break;
                }
            }
        });
    }

    async handleButtonClick(event) {
        const button = event.target;
        const action = button.dataset.action;
        const page = parseInt(button.dataset.page) || 1;
        const row = parseInt(button.dataset.row) || 1;
        const col = parseInt(button.dataset.col) || 1;

        // –í–∏–∑—É–∞–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
        button.classList.add('pressed');
        button.disabled = true;
        
        setTimeout(() => {
            button.classList.remove('pressed');
            button.disabled = false;
        }, 1000);

        const command = {
            id: Date.now().toString() + Math.random().toString(36).substr(2, 5),
            action: action,
            page: page,
            row: row,
            col: col,
            timestamp: Date.now(),
            executed: false
        };

        try {
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
            await this.sendGlobalCommand(command);
            
            this.commandsSent++;
            this.commandsSentElement.textContent = this.commandsSent;
            
            this.log(`üöÄ –ì–ª–æ–±–∞–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: ${action} ‚Üí ${page}/${row}/${col}`, 'success');
        } catch (error) {
            this.log(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: ${error.message}`, 'error');
            button.disabled = false;
        }
    }

    async sendGlobalCommand(command) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º GitHub Gist –∫–∞–∫ –≥–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∫–æ–º–∞–Ω–¥
        try {
            // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∫–æ–º–∞–Ω–¥—ã
            let currentCommands = [];
            
            try {
                const response = await fetch(`https://api.github.com/gists/b4f8c2d6e1a9f5d3c8b7e6a4d2f1c3e5`, {
                    method: 'GET',
                    headers: {
                        'Accept': 'application/vnd.github.v3+json'
                    }
                });
                
                if (response.ok) {
                    const gist = await response.json();
                    const content = gist.files['cs2-global-commands.json'].content;
                    const data = JSON.parse(content);
                    currentCommands = data.commands || [];
                }
            } catch (err) {
                // Gist –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –æ—à–∏–±–∫–∞ - –Ω–∞—á–∏–Ω–∞–µ–º —Å –ø—É—Å—Ç–æ–≥–æ –º–∞—Å—Å–∏–≤–∞
                currentCommands = [];
            }

            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É
            currentCommands.push(command);
            
            // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 –∫–æ–º–∞–Ω–¥ —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–ø–æ–ª–Ω–∏—Ç—å Gist
            if (currentCommands.length > 50) {
                currentCommands = currentCommands.slice(-50);
            }

            const gistData = {
                description: "CS2 Global Remote Control Commands",
                public: true,
                files: {
                    "cs2-global-commands.json": {
                        content: JSON.stringify({
                            commands: currentCommands,
                            lastUpdate: Date.now()
                        }, null, 2)
                    }
                }
            };

            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º Gist
            const response = await fetch(`https://api.github.com/gists/b4f8c2d6e1a9f5d3c8b7e6a4d2f1c3e5`, {
                method: 'PATCH',
                headers: {
                    'Accept': 'application/vnd.github.v3+json',
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(gistData)
            });

            if (!response.ok) {
                // –ï—Å–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –Ω–µ —É–¥–∞–ª–æ—Å—å, –ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π Gist
                const createResponse = await fetch('https://api.github.com/gists', {
                    method: 'POST',
                    headers: {
                        'Accept': 'application/vnd.github.v3+json',
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(gistData)
                });
                
                if (!createResponse.ok) {
                    throw new Error(`HTTP ${createResponse.status}`);
                }
            }

        } catch (error) {
            // Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ localStorage –¥–ª—è –¥–µ–º–æ
            console.warn('GitHub Gist –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º localStorage:', error);
            
            let commands = JSON.parse(localStorage.getItem('cs2-global-commands') || '[]');
            commands.push(command);
            
            // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 –∫–æ–º–∞–Ω–¥
            if (commands.length > 20) {
                commands = commands.slice(-20);
            }
            
            localStorage.setItem('cs2-global-commands', JSON.stringify(commands));
            
            this.log('‚ö†Ô∏è –ö–æ–º–∞–Ω–¥–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ (–¥–ª—è –¥–µ–º–æ)', 'warning');
        }
    }

    addCustomButton() {
        const label = document.getElementById('custom-label').value.trim();
        const page = parseInt(document.getElementById('custom-page').value) || 1;
        const row = parseInt(document.getElementById('custom-row').value) || 1;
        const col = parseInt(document.getElementById('custom-col').value) || 0;

        if (!label) {
            alert('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏');
            return;
        }

        const container = document.getElementById('custom-buttons');
        const button = document.createElement('button');
        button.className = 'control-btn test';
        button.dataset.action = `custom-${Date.now()}`;
        button.dataset.page = page.toString();
        button.dataset.row = row.toString();
        button.dataset.col = col.toString();
        button.innerHTML = `üéØ ${label}<br><small>${page}/${row}/${col}</small>`;

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è
        button.addEventListener('contextmenu', (e) => {
            e.preventDefault();
            if (confirm('–£–¥–∞–ª–∏—Ç—å —ç—Ç—É –∫–Ω–æ–ø–∫—É?')) {
                button.remove();
            }
        });

        button.addEventListener('click', (e) => this.handleButtonClick(e));
        container.appendChild(button);

        // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
        document.getElementById('custom-label').value = '';
        document.getElementById('custom-page').value = '1';
        document.getElementById('custom-row').value = '1';
        document.getElementById('custom-col').value = '1';

        this.log(`‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞: ${label} (${page}/${row}/${col})`, 'info');
    }

    startSessionTimer() {
        setInterval(() => {
            const elapsed = Date.now() - this.startTime;
            const minutes = Math.floor(elapsed / 60000);
            const seconds = Math.floor((elapsed % 60000) / 1000);
            this.sessionTimeElement.textContent = `${minutes}:${seconds.toString().padStart(2, '0')}`;
        }, 1000);
    }

    exportLog() {
        const logEntries = Array.from(this.logElement.children).map(entry => entry.textContent);
        const logText = logEntries.join('\n');
        const blob = new Blob([logText], { type: 'text/plain' });
        const url = URL.createObjectURL(blob);
        
        const a = document.createElement('a');
        a.href = url;
        a.download = `cs2-global-remote-log-${Date.now()}.txt`;
        a.click();
        
        URL.revokeObjectURL(url);
        this.log('üìÑ –õ–æ–≥ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω', 'info');
    }

    log(message, type = 'info') {
        const timestamp = new Date().toLocaleTimeString();
        const logEntry = document.createElement('div');
        logEntry.className = `log-entry ${type}`;
        logEntry.textContent = `[${timestamp}] ${message}`;
        
        this.logElement.appendChild(logEntry);
        this.logElement.scrollTop = this.logElement.scrollHeight;

        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
        const entries = this.logElement.children;
        if (entries.length > 100) {
            this.logElement.removeChild(entries[0]);
        }
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
let app;

document.addEventListener('DOMContentLoaded', () => {
    app = new GlobalRemoteControl();
});
