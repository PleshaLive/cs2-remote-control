// Firebase Configuration –¥–ª—è CS2 Remote Control
const firebaseConfig = {
    apiKey: "AIzaSyC8Q5X9x0X9x0X9x0X9x0X9x0X9x0X9x0X",  // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à API Key
    authDomain: "cs2-remote-control.firebaseapp.com",     // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –¥–æ–º–µ–Ω
    databaseURL: "https://cs2-remote-control-default-rtdb.firebaseio.com/", // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à URL
    projectId: "cs2-remote-control",                      // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à Project ID
    storageBucket: "cs2-remote-control.appspot.com",     // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à Storage Bucket
    messagingSenderId: "123456789012",                    // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à Sender ID
    appId: "1:123456789012:web:abcdef123456789abcdef"     // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à App ID
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase
firebase.initializeApp(firebaseConfig);
const database = firebase.database();

class FirebaseRemoteControl {
    constructor() {
        this.sessionId = this.generateSessionId();
        this.commandsSent = 0;
        this.startTime = Date.now();
        this.isConnected = false;
        
        // UI —ç–ª–µ–º–µ–Ω—Ç—ã
        this.statusElement = document.getElementById('status');
        this.sessionIdElement = document.getElementById('session-id');
        this.pollingUrlElement = document.getElementById('polling-url');
        this.connectionDetailsElement = document.getElementById('connection-details');
        this.logElement = document.getElementById('event-log');
        this.commandsSentElement = document.getElementById('commands-sent');
        this.sessionTimeElement = document.getElementById('session-time');
        
        this.init();
    }

    generateSessionId() {
        return 'cs2-' + Date.now().toString(36) + '-' + Math.random().toString(36).substr(2, 9);
    }

    init() {
        this.bindEvents();
        this.setupUI();
        this.setupFirebaseListeners();
        this.startSessionTimer();
        
        this.log('üî• Firebase –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω', 'success');
        this.log(`üìã Session ID: ${this.sessionId}`, 'info');
    }

    setupUI() {
        this.sessionIdElement.textContent = this.sessionId;
        this.pollingUrlElement.value = `https://cs2-remote-control-default-rtdb.firebaseio.com/sessions/${this.sessionId}/commands.json`;
        this.updateConnectionStatus('waiting');
    }

    setupFirebaseListeners() {
        // –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –≤ Firebase
        const sessionRef = database.ref(`sessions/${this.sessionId}`);
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é
        sessionRef.set({
            created: firebase.database.ServerValue.TIMESTAMP,
            status: 'active',
            commands: [],
            lastPoll: null
        });

        // –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ lastPoll (–∫–æ–≥–¥–∞ GSI –æ–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã)
        sessionRef.child('lastPoll').on('value', (snapshot) => {
            const lastPoll = snapshot.val();
            if (lastPoll) {
                this.updateConnectionStatus('connected');
                const timeDiff = Date.now() - lastPoll;
                this.connectionDetailsElement.textContent = `–ü–æ—Å–ª–µ–¥–Ω–∏–π –æ–ø—Ä–æ—Å: ${Math.round(timeDiff/1000)} —Å–µ–∫ –Ω–∞–∑–∞–¥`;
                
                if (!this.isConnected) {
                    this.isConnected = true;
                    this.log('‚úÖ GSI Companion –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è!', 'success');
                }
            }
        });

        // –°–ª—É—à–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        sessionRef.child('executed').on('child_added', (snapshot) => {
            const executedCommand = snapshot.val();
            this.log(`‚úÖ –ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: ${executedCommand.action} (${executedCommand.page}/${executedCommand.row}/${executedCommand.col})`, 'success');
        });

        // –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        window.addEventListener('beforeunload', () => {
            sessionRef.child('status').set('closed');
        });
    }

    bindEvents() {
        // –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        document.querySelectorAll('.control-btn').forEach(button => {
            button.addEventListener('click', (e) => this.handleButtonClick(e));
        });

        // –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ URL
        document.getElementById('copy-url').addEventListener('click', () => {
            this.copyPollingUrl();
        });

        // –õ–æ–≥ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        document.getElementById('clear-log').addEventListener('click', () => {
            this.logElement.innerHTML = '<div class="log-entry info">–õ–æ–≥ –æ—á–∏—â–µ–Ω</div>';
        });

        document.getElementById('export-log').addEventListener('click', () => {
            this.exportLog();
        });

        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –∫–Ω–æ–ø–∫–∏
        document.getElementById('add-custom-btn').addEventListener('click', () => {
            this.addCustomButton();
        });

        // –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏
        document.addEventListener('keydown', (e) => {
            if (e.ctrlKey || e.metaKey) {
                switch(e.key) {
                    case '1':
                        e.preventDefault();
                        document.querySelector('[data-action="live"]')?.click();
                        break;
                    case '2':
                        e.preventDefault();
                        document.querySelector('[data-action="pause"]')?.click();
                        break;
                    case '3':
                        e.preventDefault();
                        document.querySelector('[data-action="stop"]')?.click();
                        break;
                }
            }
        });
    }

    async handleButtonClick(event) {
        const button = event.target;
        const action = button.dataset.action;
        const page = parseInt(button.dataset.page) || 1;
        const row = parseInt(button.dataset.row) || 1;
        const col = parseInt(button.dataset.col) || 1;

        // –í–∏–∑—É–∞–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
        button.classList.add('pressed');
        button.disabled = true;
        
        setTimeout(() => {
            button.classList.remove('pressed');
            button.disabled = false;
        }, 1000);

        const command = {
            id: Date.now().toString() + Math.random().toString(36).substr(2, 5),
            action: action,
            page: page,
            row: row,
            col: col,
            timestamp: firebase.database.ServerValue.TIMESTAMP,
            executed: false
        };

        try {
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –≤ Firebase
            await database.ref(`sessions/${this.sessionId}/commands`).push(command);
            
            this.commandsSent++;
            this.commandsSentElement.textContent = this.commandsSent;
            
            this.log(`üéØ –ö–æ–º–∞–Ω–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: ${action} ‚Üí ${page}/${row}/${col}`, 'info');
        } catch (error) {
            this.log(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: ${error.message}`, 'error');
            button.disabled = false;
        }
    }

    addCustomButton() {
        const label = document.getElementById('custom-label').value.trim();
        const page = parseInt(document.getElementById('custom-page').value) || 1;
        const row = parseInt(document.getElementById('custom-row').value) || 1;
        const col = parseInt(document.getElementById('custom-col').value) || 0;

        if (!label) {
            alert('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏');
            return;
        }

        const container = document.getElementById('custom-buttons');
        const button = document.createElement('button');
        button.className = 'control-btn test';
        button.dataset.action = `custom-${Date.now()}`;
        button.dataset.page = page.toString();
        button.dataset.row = row.toString();
        button.dataset.col = col.toString();
        button.innerHTML = `üéØ ${label}<br><small>${page}/${row}/${col}</small>`;

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è
        button.addEventListener('contextmenu', (e) => {
            e.preventDefault();
            if (confirm('–£–¥–∞–ª–∏—Ç—å —ç—Ç—É –∫–Ω–æ–ø–∫—É?')) {
                button.remove();
            }
        });

        button.addEventListener('click', (e) => this.handleButtonClick(e));
        container.appendChild(button);

        // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
        document.getElementById('custom-label').value = '';
        document.getElementById('custom-page').value = '1';
        document.getElementById('custom-row').value = '1';
        document.getElementById('custom-col').value = '1';

        this.log(`‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞: ${label} (${page}/${row}/${col})`, 'info');
    }

    updateConnectionStatus(status) {
        this.statusElement.className = `status ${status}`;
        
        switch(status) {
            case 'connected':
                this.statusElement.textContent = 'üü¢ –ü–æ–¥–∫–ª—é—á–µ–Ω';
                break;
            case 'waiting':
                this.statusElement.textContent = 'üü° –û–∂–∏–¥–∞–Ω–∏–µ...';
                break;
            case 'error':
                this.statusElement.textContent = 'üî¥ –ù–µ—Ç —Å–≤—è–∑–∏';
                break;
        }
    }

    async copyPollingUrl() {
        try {
            await navigator.clipboard.writeText(this.pollingUrlElement.value);
            const button = document.getElementById('copy-url');
            const originalText = button.textContent;
            
            button.textContent = '‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!';
            button.classList.add('copied');
            
            setTimeout(() => {
                button.textContent = originalText;
                button.classList.remove('copied');
            }, 2000);
            
            this.log('üìã URL —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞', 'success');
        } catch (err) {
            // Fallback
            this.pollingUrlElement.select();
            document.execCommand('copy');
            this.log('üìã URL —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω', 'success');
        }
    }

    startSessionTimer() {
        setInterval(() => {
            const elapsed = Date.now() - this.startTime;
            const minutes = Math.floor(elapsed / 60000);
            const seconds = Math.floor((elapsed % 60000) / 1000);
            this.sessionTimeElement.textContent = `${minutes}:${seconds.toString().padStart(2, '0')}`;
        }, 1000);
    }

    exportLog() {
        const logEntries = Array.from(this.logElement.children).map(entry => entry.textContent);
        const logText = logEntries.join('\n');
        const blob = new Blob([logText], { type: 'text/plain' });
        const url = URL.createObjectURL(blob);
        
        const a = document.createElement('a');
        a.href = url;
        a.download = `cs2-remote-log-${this.sessionId}.txt`;
        a.click();
        
        URL.revokeObjectURL(url);
        this.log('üìÑ –õ–æ–≥ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω', 'info');
    }

    log(message, type = 'info') {
        const timestamp = new Date().toLocaleTimeString();
        const logEntry = document.createElement('div');
        logEntry.className = `log-entry ${type}`;
        logEntry.textContent = `[${timestamp}] ${message}`;
        
        this.logElement.appendChild(logEntry);
        this.logElement.scrollTop = this.logElement.scrollHeight;

        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
        const entries = this.logElement.children;
        if (entries.length > 100) {
            this.logElement.removeChild(entries[0]);
        }
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
let app;

document.addEventListener('DOMContentLoaded', () => {
    app = new FirebaseRemoteControl();
});
