class OnlineAdvancedController {
    constructor() {
        this.buttons = {};
        this.isConnected = false;
        this.checkInterval = null;
        this.logs = [];
        this.localApiUrl = 'http://127.0.0.1:2828/api/local-buttons';
        this.gistId = 'your-gist-id-here'; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π Gist ID
        this.useLocalAPI = false;
        
        this.init();
    }

    async init() {
        await this.loadButtons();
        this.createButtonsGrid();
        this.startMonitoring();
        this.log('–û–Ω–ª–∞–π–Ω –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω', 'info');
    }

    async loadButtons() {
        // –í –æ–Ω–ª–∞–π–Ω —Ä–µ–∂–∏–º–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ localStorage
        const saved = localStorage.getItem('cs2-advanced-buttons');
        if (saved) {
            try {
                const data = JSON.parse(saved);
                this.buttons = data.buttons || data;
                this.log('–ö–Ω–æ–ø–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ localStorage', 'info');
                return;
            } catch (e) {
                this.log('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ localStorage', 'error');
            }
        }
        
        // –ö–Ω–æ–ø–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –æ–Ω–ª–∞–π–Ω —Ä–µ–∂–∏–º–∞
        this.buttons = {
            'bomb_planted': {
                label: '–ë–æ–º–±–∞ –∑–∞–ª–æ–∂–µ–Ω–∞',
                icon: 'fas fa-bomb',
                page: 1,
                row: 1,
                col: 1,
                state: '-',
                timestamp: 0
            },
            'bomb_defused': {
                label: '–ë–æ–º–±–∞ –æ–±–µ–∑–≤—Ä–µ–∂–µ–Ω–∞',
                icon: 'fas fa-shield-alt',
                page: 1,
                row: 1,
                col: 2,
                state: '-',
                timestamp: 0
            },
            'round_start': {
                label: '–ù–∞—á–∞–ª–æ —Ä–∞—É–Ω–¥–∞',
                icon: 'fas fa-play',
                page: 1,
                row: 1,
                col: 3,
                state: '-',
                timestamp: 0
            },
            'round_end': {
                label: '–ö–æ–Ω–µ—Ü —Ä–∞—É–Ω–¥–∞',
                icon: 'fas fa-stop',
                page: 1,
                row: 1,
                col: 4,
                state: '-',
                timestamp: 0
            },
            'clutch_mode': {
                label: '–ö–ª–∞—Ç—á —Ä–µ–∂–∏–º',
                icon: 'fas fa-crosshairs',
                page: 1,
                row: 2,
                col: 1,
                state: '-',
                timestamp: 0
            },
            'ace_moment': {
                label: '–≠–π—Å –º–æ–º–µ–Ω—Ç',
                icon: 'fas fa-crown',
                page: 1,
                row: 2,
                col: 2,
                state: '-',
                timestamp: 0
            },
            'headshot': {
                label: '–•–µ–¥—à–æ—Ç',
                icon: 'fas fa-target',
                page: 1,
                row: 2,
                col: 3,
                state: '-',
                timestamp: 0
            },
            'multikill': {
                label: '–ú—É–ª—å—Ç–∏–∫–∏–ª–ª',
                icon: 'fas fa-skull',
                page: 1,
                row: 2,
                col: 4,
                state: '-',
                timestamp: 0
            }
        };
        
        await this.saveButtons();
        this.log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –∫–Ω–æ–ø–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–æ–Ω–ª–∞–π–Ω —Ä–µ–∂–∏–º)', 'info');
    }

    async saveButtons() {
        const data = { buttons: this.buttons };
        
        // –í –æ–Ω–ª–∞–π–Ω —Ä–µ–∂–∏–º–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –≤ localStorage
        localStorage.setItem('cs2-advanced-buttons', JSON.stringify(data));
        this.log('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ localStorage', 'success');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω–æ–µ API –¥–ª—è GSI —á–µ—Ä–µ–∑ GitHub
        await this.updateGlobalAPI();
    }

    async updateGlobalAPI() {
        try {
            // –°–æ–∑–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π API –æ–±—ä–µ–∫—Ç –≤ —Ç–æ–º –∂–µ —Ñ–æ—Ä–º–∞—Ç–µ, —á—Ç–æ –∏ api/global
            const apiData = {
                lastUpdate: Date.now(),
                buttons: {},
                info: "CS2 Button States - Advanced Controller API",
                note: "State '+' means button pressed (2 sec), '-' means idle"
            };

            // –ü–µ—Ä–µ–Ω–æ—Å–∏–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –≤ API —Ñ–æ—Ä–º–∞—Ç
            Object.entries(this.buttons).forEach(([key, button]) => {
                apiData.buttons[key] = {
                    state: button.state,
                    timestamp: button.timestamp,
                    page: button.page,
                    row: button.row,
                    col: button.col,
                    label: button.label
                };
            });

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage –ø–æ–¥ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º –∫–ª—é—á–æ–º –¥–ª—è API
            localStorage.setItem('cs2-api-global', JSON.stringify(apiData));
            
            console.log('üì° API —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ:', apiData);
            
            // –ü—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —á–µ—Ä–µ–∑ –ø—Ä–æ—Å—Ç–æ–π webhook (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω)
            await this.updateViaWebhook(apiData);
            
            this.log('üì° API —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ', 'success');
            
        } catch (error) {
            this.log(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è API: ${error.message}`, 'error');
            console.error('API update error:', error);
        }
    }

    async updateViaWebhook(apiData) {
        try {
            // –ü—Ä–æ—Å—Ç–æ–π —Å–ø–æ—Å–æ–± - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ webhook endpoint
            // –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –æ–±–Ω–æ–≤–∏—Ç—å —Ñ–∞–π–ª –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
            const webhookUrl = 'https://api.github.com/repos/PleshaLive/cs2-remote-control/dispatches';
            
            const payload = {
                event_type: 'update-api',
                client_payload: {
                    api_data: apiData,
                    timestamp: Date.now()
                }
            };

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            console.log('API Data for manual update:', JSON.stringify(apiData, null, 2));
            
            this.log('–î–∞–Ω–Ω—ã–µ –¥–ª—è API –≥–æ—Ç–æ–≤—ã (—Å–º. –∫–æ–Ω—Å–æ–ª—å –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è)', 'info');
            
            // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è JSON
            this.showAPIUpdateDialog(apiData);
            
        } catch (error) {
            this.log(`Webhook –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${error.message}`, 'warning');
        }
    }

    showAPIUpdateDialog(apiData) {
        const existingDialog = document.getElementById('api-update-dialog');
        if (existingDialog) {
            existingDialog.remove();
        }

        const dialog = document.createElement('div');
        dialog.id = 'api-update-dialog';
        dialog.style.cssText = `
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: linear-gradient(135deg, #1a1a2e, #16213e);
            color: white;
            padding: 20px;
            border-radius: 15px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.5);
            z-index: 10000;
            max-width: 500px;
            width: 90%;
        `;

        dialog.innerHTML = `
            <h3 style="margin-top: 0; color: #4ecdc4;">üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ API</h3>
            <p>–î–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å GSI Companion —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ JSON –Ω–∏–∂–µ –∏ –æ–±–Ω–æ–≤–∏—Ç–µ —Ñ–∞–π–ª <code>api/global</code>:</p>
            <textarea readonly style="width: 100%; height: 150px; background: #2c2c2c; color: white; border: none; border-radius: 5px; padding: 10px; font-family: monospace; font-size: 12px;">${JSON.stringify(apiData, null, 2)}</textarea>
            <div style="text-align: right; margin-top: 15px;">
                <button onclick="navigator.clipboard.writeText('${JSON.stringify(apiData).replace(/'/g, "\\'")}'); this.textContent='–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!'; setTimeout(() => this.textContent='–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å JSON', 2000)" style="background: #4ecdc4; color: white; border: none; padding: 8px 16px; border-radius: 5px; margin-right: 10px; cursor: pointer;">–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å JSON</button>
                <button onclick="document.getElementById('api-update-dialog').remove()" style="background: #666; color: white; border: none; padding: 8px 16px; border-radius: 5px; cursor: pointer;">–ó–∞–∫—Ä—ã—Ç—å</button>
            </div>
        `;

        document.body.appendChild(dialog);

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
            if (document.getElementById('api-update-dialog')) {
                dialog.remove();
            }
        }, 30000);
    }

    async updateViaGist(apiData) {
        try {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –ø—É–±–ª–∏—á–Ω—ã–π Gist –∫–∞–∫ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ API
            // –≠—Ç–æ—Ç Gist –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –æ–¥–∏–Ω —Ä–∞–∑ –∏ –∑–∞—Ç–µ–º –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è
            const gistUrl = 'https://gist.githubusercontent.com/PleshaLive/b4f8c2d6e1a9f5d3c8b7e6a4d2f1c3e5/raw/cs2-button-states.json';
            
            // –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            // –í –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å GitHub API —á–µ—Ä–µ–∑ —Ç–æ–∫–µ–Ω
            console.log('API Update:', apiData);
            this.log('–°–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω—ã (–Ω—É–∂–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ GitHub —Ç–æ–∫–µ–Ω–∞ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏)', 'info');
            
            // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±–Ω–æ–≤–∏–º –ª–æ–∫–∞–ª—å–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            const buttonsWithActiveStates = Object.values(apiData.buttons).filter(btn => btn.state === '+').length;
            if (buttonsWithActiveStates > 0) {
                this.log(`–ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫: ${buttonsWithActiveStates}`, 'success');
            }
            
        } catch (error) {
            this.log(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è API: ${error.message}`, 'error');
        }
    }

    async createNewGist(gistData) {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        const instructions = `
        –î–ª—è –ø–æ–ª–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å GSI Companion:
        
        1. –°–æ–∑–¥–∞–π—Ç–µ GitHub Gist —Å —Ñ–∞–π–ª–æ–º cs2-button-states.json
        2. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ:
        ${JSON.stringify(gistData.files["cs2-button-states.json"].content, null, 2)}
        
        3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ raw URL Gist –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö GSI Companion
        `;
        
        console.log(instructions);
        this.log('–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ API –≤—ã–≤–µ–¥–µ–Ω—ã –≤ –∫–æ–Ω—Å–æ–ª—å', 'info');
    }

    createButtonsGrid() {
        const grid = document.getElementById('buttonsGrid');
        grid.innerHTML = '';

        Object.entries(this.buttons).forEach(([key, button]) => {
            const buttonCard = document.createElement('div');
            buttonCard.className = 'button-card';
            buttonCard.id = `button-${key}`;
            
            buttonCard.innerHTML = `
                <i class="${button.icon} button-icon"></i>
                <div class="button-label">${button.label}</div>
                <div class="button-coords">P${button.page}/R${button.row}/C${button.col}</div>
                <div class="button-state">${button.state}</div>
                <button class="btn btn-danger" style="font-size: 12px; padding: 5px 10px; margin-top: 10px;" onclick="onlineController.removeButton('${key}')">
                    <i class="fas fa-trash"></i>
                </button>
            `;

            buttonCard.onclick = (e) => {
                if (e.target.closest('button')) return; // –ù–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è
                this.activateButton(key);
            };

            // Add touch support for mobile devices
            buttonCard.ontouchstart = (e) => {
                if (e.target.closest('button')) return;
                buttonCard.style.transform = 'scale(0.95)'; // Visual feedback
                buttonCard.style.transition = 'transform 0.1s';
            };

            buttonCard.ontouchend = (e) => {
                if (e.target.closest('button')) return;
                buttonCard.style.transform = '';
                this.activateButton(key);
                e.preventDefault(); // Prevent double-tap zoom
            };

            grid.appendChild(buttonCard);
        });
    }

    async activateButton(buttonKey) {
        if (!this.buttons[buttonKey]) return;

        const button = this.buttons[buttonKey];
        button.state = '+';
        button.timestamp = Date.now();

        // –í–∏–∑—É–∞–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è
        const buttonElement = document.getElementById(`button-${buttonKey}`);
        buttonElement.classList.add('active');
        buttonElement.querySelector('.button-state').textContent = '+';

        this.log(`üéØ –ö–Ω–æ–ø–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞: ${button.label} (${buttonKey})`, 'success');
        console.log(`Button activated: ${buttonKey}`, button);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await this.saveButtons();

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(async () => {
            button.state = '-';
            button.timestamp = Date.now();
            buttonElement.classList.remove('active');
            buttonElement.querySelector('.button-state').textContent = '-';
            await this.saveButtons();
            this.log(`‚èπÔ∏è –ö–Ω–æ–ø–∫–∞ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞: ${button.label}`, 'info');
        }, 2000);
    }

    checkConnection() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å GitHub
        fetch('https://api.github.com')
            .then(response => {
                if (response.ok) {
                    this.setConnectionStatus(true);
                } else {
                    this.setConnectionStatus(false);
                }
            })
            .catch(() => {
                this.setConnectionStatus(false);
            });
    }

    setConnectionStatus(connected) {
        this.isConnected = connected;
        const statusElement = document.getElementById('connectionStatus');
        
        if (connected) {
            statusElement.className = 'status-item status-connected';
            statusElement.innerHTML = '<i class="fas fa-circle"></i><span>–û–Ω–ª–∞–π–Ω —Ä–µ–∂–∏–º</span>';
        } else {
            statusElement.className = 'status-item status-disconnected';
            statusElement.innerHTML = '<i class="fas fa-circle"></i><span>–û—Ñ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º</span>';
        }
    }

    startMonitoring() {
        this.checkInterval = setInterval(() => {
            this.checkConnection();
        }, 5000);
    }

    async addButton() {
        const name = document.getElementById('buttonName').value.trim();
        const icon = document.getElementById('buttonIcon').value.trim();
        const page = parseInt(document.getElementById('buttonPage').value);
        const row = parseInt(document.getElementById('buttonRow').value);
        const col = parseInt(document.getElementById('buttonCol').value);

        if (!name) {
            this.log('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏', 'warning');
            return;
        }

        if (!icon) {
            this.log('–í–≤–µ–¥–∏—Ç–µ –∏–∫–æ–Ω–∫—É –∫–Ω–æ–ø–∫–∏', 'warning');
            return;
        }

        const buttonKey = name.toLowerCase().replace(/\s+/g, '_').replace(/[^a-z0-9_]/g, '');
        
        if (this.buttons[buttonKey]) {
            this.log('–ö–Ω–æ–ø–∫–∞ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç', 'warning');
            return;
        }

        this.buttons[buttonKey] = {
            label: name,
            icon: icon,
            page: page,
            row: row,
            col: col,
            state: '-',
            timestamp: 0
        };

        await this.saveButtons();
        this.createButtonsGrid();

        // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
        document.getElementById('buttonName').value = '';
        document.getElementById('buttonIcon').value = 'fas fa-play';
        
        this.log(`–ö–Ω–æ–ø–∫–∞ "${name}" –¥–æ–±–∞–≤–ª–µ–Ω–∞`, 'success');
    }

    async removeButton(buttonKey) {
        if (!this.buttons[buttonKey]) return;

        const buttonName = this.buttons[buttonKey].label;
        delete this.buttons[buttonKey];

        await this.saveButtons();
        this.createButtonsGrid();

        this.log(`–ö–Ω–æ–ø–∫–∞ "${buttonName}" —É–¥–∞–ª–µ–Ω–∞`, 'info');
    }

    exportConfig() {
        const config = {
            buttons: this.buttons,
            version: '1.0',
            exported: new Date().toISOString(),
            mode: 'online'
        };

        const dataStr = JSON.stringify(config, null, 2);
        const dataBlob = new Blob([dataStr], { type: 'application/json' });
        const url = URL.createObjectURL(dataBlob);
        
        const link = document.createElement('a');
        link.href = url;
        link.download = `cs2-online-controller-config-${new Date().toISOString().split('T')[0]}.json`;
        link.click();

        URL.revokeObjectURL(url);
        this.log('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã', 'success');
    }

    importConfig() {
        document.getElementById('importModal').style.display = 'block';
    }

    async performImport() {
        const jsonText = document.getElementById('importJson').value.trim();
        
        if (!jsonText) {
            this.log('–í–≤–µ–¥–∏—Ç–µ JSON –Ω–∞—Å—Ç—Ä–æ–π–∫–∏', 'warning');
            return;
        }

        try {
            const config = JSON.parse(jsonText);
            
            if (config.buttons && typeof config.buttons === 'object') {
                this.buttons = config.buttons;
                await this.saveButtons();
                this.createButtonsGrid();
                
                this.closeModal();
                this.log('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã', 'success');
            } else {
                this.log('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫', 'error');
            }
        } catch (error) {
            this.log(`–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: ${error.message}`, 'error');
        }
    }

    async resetConfig() {
        if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.')) {
            localStorage.removeItem('cs2-advanced-buttons');
            await this.loadButtons();
            this.createButtonsGrid();
            this.log('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã', 'info');
        }
    }

    closeModal() {
        document.getElementById('importModal').style.display = 'none';
        document.getElementById('importJson').value = '';
    }

    log(message, type = 'info') {
        const timestamp = new Date().toLocaleTimeString();
        const logEntry = {
            timestamp,
            message,
            type
        };
        
        this.logs.unshift(logEntry);
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–æ–≥–æ–≤
        if (this.logs.length > 100) {
            this.logs = this.logs.slice(0, 100);
        }
        
        this.updateLogDisplay();
    }

    updateLogDisplay() {
        const container = document.getElementById('logContainer');
        container.innerHTML = this.logs.map(log => 
            `<div class="log-entry log-${log.type}">
                [${log.timestamp}] ${log.message}
            </div>`
        ).join('');
        
        // –ê–≤—Ç–æ—Å–∫—Ä–æ–ª–ª –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–ø–∏—Å–∏
        container.scrollTop = 0;
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è HTML
async function addButton() {
    await onlineController.addButton();
}

async function exportConfig() {
    onlineController.exportConfig();
}

async function importConfig() {
    onlineController.importConfig();
}

async function resetConfig() {
    await onlineController.resetConfig();
}

function closeModal() {
    onlineController.closeModal();
}

async function performImport() {
    await onlineController.performImport();
}

function handleFileImport(event) {
    const file = event.target.files[0];
    if (file) {
        const reader = new FileReader();
        reader.onload = (e) => {
            document.getElementById('importJson').value = e.target.result;
            document.getElementById('importModal').style.display = 'block';
        };
        reader.readAsText(file);
    }
}

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –µ–≥–æ
window.onclick = function(event) {
    const modal = document.getElementById('importModal');
    if (event.target === modal) {
        onlineController.closeModal();
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–Ω–ª–∞–π–Ω –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
const onlineController = new OnlineAdvancedController();
